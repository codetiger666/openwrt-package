name: Update Version

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  get-version:
    name: ${{ matrix.package }} update version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - nezha
          - ddns-go
    outputs:
      pkg_app_version: ${{ steps.get-version.outputs.pkg_app_version }}
    steps:
      - id: checkout
        name: ${{ matrix.package }} Checkout
        uses: actions/checkout@main
        
      - name: git init
        run: |
          git config --global user.email ${{ secrets.email }}
          git config --global user.name "codetiger666"
          git config pull.rebase true
        
      - id: get-version
        name: ${{ matrix.package }}-get-version
        run: |
          echo "pkg_version=$(grep "PKG_VERSION:="  ${{ matrix.package }}/Makefile | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
          echo "pkg_app_version=$(grep "PKG_VERSION:=" luci-app-${{ matrix.package }}/Makefile | cut -d '=' -f 2)" >> $GITHUB_OUTPUT

      - id: get-repo
        name: get-${{ matrix.package }}-repo
        run: |
          source scripts/common.sh
          repo=$(cat package-list | grep ${{ matrix.package }} | awk -F'=' '{print $2}')
          location=$(cat package-list | grep ${{ matrix.package }} | awk -F'=' '{print $3}')
          handle=$(cat package-list | grep ${{ matrix.package }} | awk -F'=' '{print $4}')
          new_version=$(get_latest_version "$location" "$repo")
          pkgVersion=$(apply_handle "$handle" "$new_version")
          echo "new_pkg_repo=$repo" >> $GITHUB_OUTPUT
            echo "new_pkg_tag=$new_version" >> $GITHUB_OUTPUT
          echo "new_pkg_version=$pkgVersion" >> $GITHUB_OUTPUT
 
      - name: Checkout ${{ matrix.package }}
        run: |
          git clone https://github.com/${{ steps.get-repo.outputs.new_pkg_repo }} -b ${{ steps.get-repo.outputs.new_pkg_tag }} newPackage
          
      - id: get-new-info
        name: Get New Info
        run: |
          echo "commit_date=$(git -C newPackage log -n 1 --format=%cs)" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git -C newPackage rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "short_commit_sha=$(git -C newPackage rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          git -C newPackage config tar.xz.command "xz -c"
          git -C newPackage archive --output=newPackage.tar.xz HEAD
          echo "checksum=$(sha256sum newPackage/newPackage.tar.xz | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          rm -rf newPackage
        
      - name: update ${{ matrix.package }} Makefile
        if: ${{ steps.get-version.outputs.pkg_version != steps.get-repo.outputs.new_pkg_version }}
        run: |
          sed -i "s/PKG_RELEASE:=.*/PKG_RELEASE:=1/" ${{ matrix.package }}/Makefile
          sed -i "s/PKG_SOURCE_DATE:=.*/PKG_SOURCE_DATE:=${{ steps.get-new-info.outputs.commit_date }}/" ${{ matrix.package }}/Makefile
          sed -i "s/PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=${{ steps.get-new-info.outputs.commit_sha }}/" ${{ matrix.package }}/Makefile
          sed -i "s/PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=${{ steps.get-new-info.outputs.checksum }}/" ${{ matrix.package }}/Makefile
          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${{ steps.get-repo.outputs.new_pkg_version }}/" ${{ matrix.package }}/Makefile
          git add .
          git commit -m "chore: ${{ matrix.package }} core bump version to ${{ steps.get-repo.outputs.new_pkg_version }}"
          git pull || true && git push || true
               
  update-version:
    name: update version
    runs-on: ubuntu-latest
    needs:
      - get-version
    steps:          
      - name: Get Other Repo Checkout
        uses: actions/checkout@main
        
      - name: Get Other Repo git init
        run: |
          git config --global user.email ${{ secrets.email }}
          git config --global user.name "codetiger666"
          git config pull.rebase true
        
      - name: update nikki
        continue-on-error: true
        run: |
          git clone https://github.com/nikkinikki-org/OpenWrt-nikki.git -b $(curl -s https://api.github.com/repos/nikkinikki-org/OpenWrt-nikki/releases/latest | jq -r '.tag_name') --single-branch --dept=1 nikki-org
          cp -ra nikki-org/nikki ./
          cp -ra nikki-org/luci-app-nikki ./
          rm -rf nikki-org
          # Ê∑ªÂä†ÁâπÊÆäÂ§ÑÁêÜ
          tab=$(printf '\t')
          sed -i "/\$(1)\/etc\/nikki\/mixin.yaml/a\\
          $tab\$(INSTALL_DATA) \$(CURDIR)/ssl/server.key \$(1)/etc/nikki/run/ssl/server.key" nikki/Makefile
          sed -i "/\$(1)\/etc\/nikki\/mixin.yaml/a\\
          $tab\$(INSTALL_DATA) \$(CURDIR)/ssl/server.crt \$(1)/etc/nikki/run/ssl/server.crt" nikki/Makefile 
          sed -i "/\$(1)\/etc\/nikki\/mixin.yaml/a\\
          $tab\$(INSTALL_DIR) \$(1)/etc/nikki/run/ssl" nikki/Makefile  
          git add .
          git commit -m "chore: nikki bump version to $(curl -s https://api.github.com/repos/nikkinikki-org/OpenWrt-nikki/releases/latest | jq -r '.tag_name')"  || true
        
      - name: update openlist
        continue-on-error: true
        run: |
          git clone https://github.com/sbwml/luci-app-openlist.git -b $(curl -s https://api.github.com/repos/sbwml/luci-app-openlist/releases/latest | jq -r '.tag_name') --single-branch --dept=1 openlist-org
          cp -ra openlist-org/openlist ./
          cp -ra openlist-org/luci-app-openlist ./
          rm -rf openlist-org
          git add .
          git commit -m "chore: openlist bump version to $(curl -s https://api.github.com/repos/sbwml/luci-app-openlist/releases/latest | jq -r '.tag_name')"  || true
      
      - name: update smartdns
        continue-on-error: true
        run: |
          git clone https://github.com/pymumu/smartdns.git newPackage
          commit_date=$(git -C newPackage log -n 1 --format=%cs)
          commit_sha=$(git -C newPackage rev-parse HEAD)
          short_commit_sha=$(git -C newPackage rev-parse --short HEAD)
          git -C newPackage config tar.xz.command "xz -c"
          git -C newPackage archive --output=newPackage.tar.xz HEAD
          checksum=$(sha256sum newPackage/newPackage.tar.xz | cut -d ' ' -f 1)
          sed -i "s/PKG_RELEASE:=.*/PKG_RELEASE:=1/" smartdns/Makefile
          sed -i "s/PKG_SOURCE_DATE:=.*/PKG_SOURCE_DATE:=${commit_date}/" smartdns/Makefile
          sed -i "s/PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=${commit_sha}/" smartdns/Makefile
          sed -i "s/PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=${checksum}/" smartdns/Makefile
          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${commit_date}/" smartdns/Makefile
          git clone https://github.com/pymumu/smartdns-webui.git newPackageUi
          commit_sha=$(git -C newPackageUi rev-parse HEAD)
          sed -i "s/SMARTDNS_WEBUI_SOURCE_VERSION:=.*/SMARTDNS_WEBUI_SOURCE_VERSION:=${commit_sha}/" smartdns/Makefile
          git clone https://github.com/pymumu/luci-app-smartdns.git newPackageLuci
          cp -ra newPackageLuci/* luci-app-smartdns/
          cp -ra newPackageLuci/* luci-app-smartdns/
          sed -i "s/LUCI_DEPENDS:=+luci-base +smartdns/LUCI_DEPENDS:=+luci-base +smartdns-ui/" luci-app-smartdns/Makefile
          sed -i "s#include ../../luci.mk#include \$(TOPDIR)/feeds/luci/luci.mk#" luci-app-smartdns/Makefile
          rm -rf newPackage newPackageUi newPackageLuci
          git add .
          git commit -m "chore: smartdns core bump version to ${commit_date}"

      - name: push and handle tag
        run: |
          git pull || true && git push || true
                      
      - name: run action
        run: |
          curl -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches \
              -d "{\"ref\":\"main\"}"
          curl -X POST \
                --url https://api.telegram.org/bot${{ secrets.TG_BOT_KEY }}/sendMessage \
                --header 'Accept: */*' \
                --header 'Accept-Encoding: gzip, deflate, br' \
                --header 'Connection: keep-alive' \
                --header 'Content-Type: application/json' \
                --data "{
                \"chat_id\": \"${{ secrets.TG_BOT_USER_ID }}\",
                \"text\": \"\\\\[openwrt\\\\-pkages\\\\] \\\\[üü¢ Ëß¶ÂèëÁºñËØë\\\\]\",
                \"parse_mode\": \"MarkdownV2\"
                }"
          
      - name: Remove workflow runs
        uses: GitRML/delete-workflow-runs@main
        if: always()
        with:
          retain_days: 1
          keep_minimum_runs: 3
